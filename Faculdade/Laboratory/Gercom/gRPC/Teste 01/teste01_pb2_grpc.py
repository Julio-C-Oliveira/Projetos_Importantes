# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import teste01_pb2 as teste01__pb2


class GiornoGiovannaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayYume = channel.unary_unary(
                '/teste.GiornoGiovanna/SayYume',
                request_serializer=teste01__pb2.SoxRequest.SerializeToString,
                response_deserializer=teste01__pb2.SoxReply.FromString,
                )
        self.Combo = channel.unary_stream(
                '/teste.GiornoGiovanna/Combo',
                request_serializer=teste01__pb2.SoxRequest.SerializeToString,
                response_deserializer=teste01__pb2.SoxReply.FromString,
                )
        self.KingCrimson = channel.stream_unary(
                '/teste.GiornoGiovanna/KingCrimson',
                request_serializer=teste01__pb2.SoxRequest.SerializeToString,
                response_deserializer=teste01__pb2.SoxDelayedReply.FromString,
                )
        self.GoldenExperienceRequiem = channel.stream_stream(
                '/teste.GiornoGiovanna/GoldenExperienceRequiem',
                request_serializer=teste01__pb2.SoxRequest.SerializeToString,
                response_deserializer=teste01__pb2.SoxReply.FromString,
                )


class GiornoGiovannaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SayYume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Combo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KingCrimson(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GoldenExperienceRequiem(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GiornoGiovannaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayYume': grpc.unary_unary_rpc_method_handler(
                    servicer.SayYume,
                    request_deserializer=teste01__pb2.SoxRequest.FromString,
                    response_serializer=teste01__pb2.SoxReply.SerializeToString,
            ),
            'Combo': grpc.unary_stream_rpc_method_handler(
                    servicer.Combo,
                    request_deserializer=teste01__pb2.SoxRequest.FromString,
                    response_serializer=teste01__pb2.SoxReply.SerializeToString,
            ),
            'KingCrimson': grpc.stream_unary_rpc_method_handler(
                    servicer.KingCrimson,
                    request_deserializer=teste01__pb2.SoxRequest.FromString,
                    response_serializer=teste01__pb2.SoxDelayedReply.SerializeToString,
            ),
            'GoldenExperienceRequiem': grpc.stream_stream_rpc_method_handler(
                    servicer.GoldenExperienceRequiem,
                    request_deserializer=teste01__pb2.SoxRequest.FromString,
                    response_serializer=teste01__pb2.SoxReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'teste.GiornoGiovanna', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GiornoGiovanna(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SayYume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/teste.GiornoGiovanna/SayYume',
            teste01__pb2.SoxRequest.SerializeToString,
            teste01__pb2.SoxReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Combo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/teste.GiornoGiovanna/Combo',
            teste01__pb2.SoxRequest.SerializeToString,
            teste01__pb2.SoxReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KingCrimson(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/teste.GiornoGiovanna/KingCrimson',
            teste01__pb2.SoxRequest.SerializeToString,
            teste01__pb2.SoxDelayedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GoldenExperienceRequiem(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/teste.GiornoGiovanna/GoldenExperienceRequiem',
            teste01__pb2.SoxRequest.SerializeToString,
            teste01__pb2.SoxReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
